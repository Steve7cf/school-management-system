<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - School Management System</title>
    
    <!-- Bootstrap 5.3.2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome 6.5.1 -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link href="/css/style.css" rel="stylesheet">
    <link href="/css/dashboard.css" rel="stylesheet">
    
    <style>
        .recipient-item {
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }
        
        .recipient-item:hover {
            background-color: #f8f9fa;
            border-left-color: #007bff;
            cursor: pointer;
        }
        
        .recipient-item.selected {
            background-color: #e3f2fd;
            border-left-color: #2196f3;
        }
        
        .avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: #007bff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .role-badge {
            font-size: 0.7rem;
            padding: 0.2rem 0.4rem;
            border-radius: 0.25rem;
            text-transform: uppercase;
            font-weight: bold;
        }
        
        .role-admin { background-color: #dc3545; color: white; }
        .role-teacher { background-color: #28a745; color: white; }
        .role-parent { background-color: #ffc107; color: black; }
        .role-student { background-color: #17a2b8; color: white; }
        
        .search-box {
            position: relative;
        }
        
        .search-box .form-control {
            padding-left: 2.5rem;
        }
        
        .search-box .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }
        
        .filter-buttons {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            border: 1px solid #dee2e6;
            background-color: white;
            color: #6c757d;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }
        
        .filter-btn:hover,
        .filter-btn.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }
    </style>
</head>
<body class="bg-light">
    <!-- Top Navbar with toggler -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary sticky-top">
        <div class="container-fluid">
            <button class="navbar-toggler me-2" type="button" data-bs-toggle="offcanvas" data-bs-target="#sidebarOffcanvas" aria-controls="sidebarOffcanvas" aria-label="Toggle sidebar">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <a class="navbar-brand fw-bold" href="/dashboard">
                <span class="d-none d-sm-inline">School Management System</span>
                <span class="d-inline d-sm-none">SMS</span>
            </a>
            
            <div class="d-flex align-items-center">
                <a href="/chat" class="btn btn-outline-light btn-sm me-2">
                    <i class="fas fa-arrow-left me-1"></i>Back
                </a>
            </div>
        </div>
    </nav>

    <!-- Offcanvas Sidebar -->
    <%- include('../../partials/offcanvas-sidebar') %>

    <!-- Main Content -->
    <div class="container-fluid main-content">
        <div class="row">
            <div class="col-12">
                <div id="recipients-data" style="display: none;" data-recipients="<%= JSON.stringify(recipients || []) %>"></div>
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-plus me-2"></i>New Conversation
                    </h1>
                </div>
                
                <div class="card shadow">
                    <div class="card-header">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="search-box">
                                    <i class="fas fa-search search-icon"></i>
                                    <input type="text" id="searchInput" class="form-control" placeholder="Search recipients...">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="filter-buttons">
                                    <button class="filter-btn active" data-filter="all">All</button>
                                    <button class="filter-btn" data-filter="admin">Admin</button>
                                    <button class="filter-btn" data-filter="teacher">Teachers</button>
                                    <button class="filter-btn" data-filter="parent">Parents</button>
                                    <button class="filter-btn" data-filter="student">Students</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush" id="recipientsList">
                        </div>
                        
                        <div id="noResults" class="text-center py-5" style="display: none;">
                            <i class="fas fa-search fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No recipients found</h5>
                            <p class="text-muted">Try adjusting your search or filters</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const recipientsDataEl = document.getElementById('recipients-data');
            const recipients = JSON.parse(recipientsDataEl.dataset.recipients);
            let filteredRecipients = [...recipients];

            function displayRecipients() {
                const recipientsList = document.getElementById('recipientsList');
                const noResults = document.getElementById('noResults');
                
                if (filteredRecipients.length === 0) {
                    recipientsList.innerHTML = '';
                    noResults.style.display = 'block';
                } else {
                    noResults.style.display = 'none';
                    recipientsList.innerHTML = filteredRecipients.map(recipient => `
                        <div class="list-group-item recipient-item" 
                             data-recipient-id="${recipient._id}"
                             data-recipient-role="${recipient.role}"
                             data-recipient-name="${recipient.firstName} ${recipient.lastName}">
                            <div class="d-flex align-items-center">
                                <div class="avatar me-3">${recipient.firstName ? recipient.firstName.charAt(0).toUpperCase() : 'U'}</div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">
                                        ${recipient.firstName} ${recipient.lastName}
                                        <span class="role-badge role-${recipient.role} ms-2">${recipient.role}</span>
                                    </h6>
                                    <small class="text-muted">
                                        ${recipient.email ? `<i class="fas fa-envelope me-1"></i>${recipient.email}` : ''}
                                        ${recipient.studentId ? `<i class="fas fa-id-card me-1"></i>ID: ${recipient.studentId}` : ''}
                                    </small>
                                </div>
                                <div class="ms-3">
                                    <button class="btn btn-primary btn-sm start-chat-btn">
                                        <i class="fas fa-comment me-1"></i>Start Chat
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('');
                }
            }

            function filterRecipients() {
                const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                const activeFilter = document.querySelector('.filter-btn.active').dataset.filter;
                
                filteredRecipients = recipients.filter(recipient => {
                    const name = `${recipient.firstName} ${recipient.lastName}`;
                    const matchesSearch = name.toLowerCase().includes(searchTerm) ||
                                        (recipient.email && recipient.email.toLowerCase().includes(searchTerm)) ||
                                        (recipient.studentId && recipient.studentId.toLowerCase().includes(searchTerm));
                    
                    const matchesFilter = activeFilter === 'all' || recipient.role === activeFilter;
                    
                    return matchesSearch && matchesFilter;
                });
                
                displayRecipients();
            }
            
            function startChat(recipientId, recipientRole) {
                const initialMessage = `Hello! I'd like to start a conversation with you.`;
                
                fetch('/chat/send', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        receiverId: recipientId,
                        receiverRole: recipientRole,
                        message: initialMessage
                    }),
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        window.location.href = `/chat/${data.conversationId}`;
                    } else {
                        alert('Error starting conversation: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error starting conversation:', error);
                    alert('An error occurred. Please check the console for details.');
                });
            }
        
            displayRecipients();

            document.getElementById('searchInput').addEventListener('input', filterRecipients);

            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    filterRecipients();
                });
            });

            document.getElementById('recipientsList').addEventListener('click', function(e) {
                console.log('Click event detected on recipientsList');
                const button = e.target.closest('.start-chat-btn');
                console.log('Button found:', button);
                if (button) {
                    console.log('Start chat button clicked!');
                    const recipientItem = button.closest('.recipient-item');
                    console.log('Recipient item:', recipientItem);
                    const recipientId = recipientItem.dataset.recipientId;
                    const recipientRole = recipientItem.dataset.recipientRole;
                    console.log('Recipient ID:', recipientId, 'Role:', recipientRole);
                    startChat(recipientId, recipientRole);
                }
            });

            const currentPath = window.location.pathname;
            const navLinks = document.querySelectorAll('.nav-link');
            navLinks.forEach(link => {
                if (currentPath.startsWith(link.getAttribute('href'))) {
                    link.classList.add('active');
                }
            });
        });
    </script>
</body>
</html> 